CREATE TABLE applestore_description_combined AS

SELECT * FROM appleStore_description1

Union ALL

SELECT * FROM appleStore_description2

UNION ALL

SELECT * FROM appleStore_description3

UNION ALL

SELECT * FROM appleStore_description4

** Exploratory Data Analysis**

-- check the number of unique apps in both tablesAppleStore

SELECT COUNT(DISTINCT id) AS UniqueAppIDS
FROM AppleStore

SELECT COUNT(DISTINCT id) as UniqueAppIDS
FROM applestore_description_combined

-- Check for any missing values

SELECT COUNT(*) as MissingValues
from AppleStore
where track_name is null OR user_rating IS null or prime_genre is null 

SELECT COUNT(*) as MissingValues
from applestore_description_combined
where app_desc is null 

--Find out the number of apps per genre

Select prime_genre, COUNT(*) AS NumApps
From AppleStore
GROUP by prime_genre
order by NumApps Desc 

--Get an overview of the apps' ratings

SELECT min(user_rating) as MinRating,
	   max(user_rating) as MaxRating,
       avg(user_rating) AS AvgRating
FROM AppleStore

-- Get the Distribution of app prices 

SELECT
	(price/2) *2 AS PriceBinStart,
    ((price/2) *2) +2 AS PriceBinEnd,
    COUNT(*) AS NumApps
FROM AppleStore

GROUP BY PriceBinStart
ORDER By PriceBinStart

**Data Analysis** 

--Determine whether paid apps have higher ratings than free apps

SELECT CASE
			When price > 0 then 'Paid'
            ELSE 'Free'
		End as App_Type,
        avg(user_rating) as Avg_Rating
From AppleStore
Group By App_Type

--Check if apps with more languages have higher ratings 

SELECT CASE
			when lang_num < 10 then '<10 languages'
            when lang_num BETWEEN 10 and 30 then '10-30 languages'
            ELSE '>30 languages'
		End as language_bucket,
        avg(user_rating) as Avg_Rating
FROM AppleStore
GROUP BY language_bucket
ORDER By Avg_Rating DESC

--Check genres with low ratings

SELECT prime_genre,
	   avg(user_rating) as Avg_Rating
From AppleStore
GROUP BY prime_genre
Order By Avg_Rating ASC
LIMIT 10

-- Check if there is correlation betwene the length of the app description and the user rating 

SELECT CASE
			When length(b.app_desc) <500 then 'Short'
            When length(b.app_desc) BETWEEN 500 and 1000 then 'Medium'
            else 'Long'
	End As description_length_bucket,
    avg(a.user_rating) as average_rating

FROM
	AppleStore as A
Join 
	applestore_description_combined as b 
on 
	a.id = b.id

Group BY description_length_bucket
ORDER By average_rating DESC

--Check the top rated apps for each genre 

SELECT
	prime_genre,
    track_name,
    user_rating
from (
  	  SELECT
  	  prime_genre,
  	  track_name,
  	  user_rating,
  	  RANK() OVER(PARTITION BY prime_genre ORDER By user_rating DESC, rating_count_tot DESC) as rank
  	  FROM
  	  AppleStore 
  	) AS a 
WHERE
a.rank = 1
